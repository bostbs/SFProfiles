//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class LinkedInProfile {
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class Industries {
        public Integer total1 {get;set;} 
        public List<Values_Y> values {get;set;} 

        public Industries(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else if (text == 'values') {
                            values = new List<Values_Y>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                values.add(new Values_Y(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Industries consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Company {
        public Integer id {get;set;} 
        public String industry {get;set;} 
        public String name {get;set;} 
        public String size {get;set;} 
        public String ticker {get;set;} 
        public String type_Z {get;set;} // in json: type

        public Company(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'industry') {
                            industry = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'size') {
                            size = parser.getText();
                        } else if (text == 'ticker') {
                            ticker = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Company consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Company_Z {
        public Integer id {get;set;} 
        public String industry {get;set;} 
        public String name {get;set;} 
        public String size {get;set;} 
        public String type_Z {get;set;} // in json: type

        public Company_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'industry') {
                            industry = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'size') {
                            size = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Company_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Certifications {
        public Integer total1 {get;set;} 
        public List<Values_Z> values {get;set;} 

        public Certifications(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else if (text == 'values') {
                            values = new List<Values_Z>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                values.add(new Values_Z(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Certifications consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Headers {
        public Integer total1 {get;set;} 
        public List<Values> values {get;set;} 

        public Headers(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else if (text == 'values') {
                            values = new List<Values>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                values.add(new Values(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Headers consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ThreeCurrentPositions {
        public Integer total1 {get;set;} 
        public List<Values_U> values {get;set;} 

        public ThreeCurrentPositions(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else if (text == 'values') {
                            values = new List<Values_U>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                values.add(new Values_U(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'ThreeCurrentPositions consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values {
        public String name {get;set;} 
        public String value {get;set;} 

        public Values(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'value') {
                            value = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Languages {
        public Integer total1 {get;set;} 
        public List<Values_X> values {get;set;} 

        public Languages(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else if (text == 'values') {
                            values = new List<Values_X>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                values.add(new Values_X(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Languages consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Source {
        public ServiceProvider serviceProvider {get;set;} 

        public Source(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'serviceProvider') {
                            serviceProvider = new ServiceProvider(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Source consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values_Z {
        public Integer id {get;set;} 
        public String name {get;set;} 

        public Values_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class StartDate {
        public Integer month {get;set;} 
        public Integer year {get;set;} 

        public StartDate(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'month') {
                            month = parser.getIntegerValue();
                        } else if (text == 'year') {
                            year = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'StartDate consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values_Y {
        public Integer id {get;set;} 

        public Values_Y(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values_Y consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values_V {
        public Integer id {get;set;} 
        public ServiceProvider skill {get;set;} 

        public Values_V(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'skill') {
                            skill = new ServiceProvider(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values_V consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Skills {
        public Integer total1 {get;set;} 
        public List<Values_V> values {get;set;} 

        public Skills(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else if (text == 'values') {
                            values = new List<Values_V>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                values.add(new Values_V(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Skills consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values_U {
        public Company company {get;set;} 
        public Integer id {get;set;} 
        public Boolean isCurrent {get;set;} 
        public ServiceProvider location {get;set;} 
        public StartDate startDate {get;set;} 
        public String summary {get;set;} 
        public String title {get;set;} 

        public Values_U(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'company') {
                            company = new Company(parser);
                        } else if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'isCurrent') {
                            isCurrent = parser.getBooleanValue();
                        } else if (text == 'location') {
                            location = new ServiceProvider(parser);
                        } else if (text == 'startDate') {
                            startDate = new StartDate(parser);
                        } else if (text == 'summary') {
                            summary = parser.getText();
                        } else if (text == 'title') {
                            title = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values_U consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values_X {
        public Integer id {get;set;} 
        public ServiceProvider language {get;set;} 

        public Values_X(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'language') {
                            language = new ServiceProvider(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values_X consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values_W {
        public Company company {get;set;} 
        public Integer id {get;set;} 
        public Boolean isCurrent {get;set;} 
        public ServiceProvider location {get;set;} 
        public StartDate startDate {get;set;} 
        public String summary {get;set;} 
        public String title {get;set;} 
        public StartDate endDate {get;set;} 

        public Values_W(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'company') {
                            company = new Company(parser);
                        } else if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'isCurrent') {
                            isCurrent = parser.getBooleanValue();
                        } else if (text == 'location') {
                            location = new ServiceProvider(parser);
                        } else if (text == 'startDate') {
                            startDate = new StartDate(parser);
                        } else if (text == 'summary') {
                            summary = parser.getText();
                        } else if (text == 'title') {
                            title = parser.getText();
                        } else if (text == 'endDate') {
                            endDate = new StartDate(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values_W consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public ApiStandardProfileRequest apiStandardProfileRequest {get;set;} 
    public Certifications certifications {get;set;} 
    public CurrentShare currentShare {get;set;} 
    public String emailAddress {get;set;} 
    public String firstName {get;set;} 
    public Following following {get;set;} 
    public String headline {get;set;} 
    public String id {get;set;} 
    public String industry {get;set;} 
    public String interests {get;set;} 
    public Languages languages {get;set;} 
    public Long lastModifiedTimestamp {get;set;} 
    public String lastName {get;set;} 
    public Location location {get;set;} 
    public String maidenName {get;set;} 
    public String pictureUrl {get;set;} 
    public Positions positions {get;set;} 
    public String publicProfileUrl {get;set;} 
    public Skills skills {get;set;} 
    public String summary {get;set;} 
    public String specialties {get;set;}
    public String associations {get; set;}
    public ThreeCurrentPositions threeCurrentPositions {get;set;} 
    public Positions threePastPositions {get;set;} 

    public LinkedInProfile(JSONParser parser) {
        while (parser.nextToken() != JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    if (text == 'apiStandardProfileRequest') {
                        apiStandardProfileRequest = new ApiStandardProfileRequest(parser);
                    } else if (text == 'certifications') {
                        certifications = new Certifications(parser);
                    } else if (text == 'currentShare') {
                        currentShare = new CurrentShare(parser);
                    } else if (text == 'emailAddress') {
                        emailAddress = parser.getText();
                    } else if (text == 'firstName') {
                        firstName = parser.getText();
                    } else if (text == 'following') {
                        following = new Following(parser);
                    } else if (text == 'headline') {
                        headline = parser.getText();
                    } else if (text == 'id') {
                        id = parser.getText();
                    } else if (text == 'industry') {
                        industry = parser.getText();
                    } else if (text == 'interests') {
                        interests = parser.getText();
                    } else if (text == 'languages') {
                        languages = new Languages(parser);
                    } else if (text == 'lastModifiedTimestamp') {
                        lastModifiedTimestamp = parser.getLongValue();
                    } else if (text == 'lastName') {
                        lastName = parser.getText();
                    } else if (text == 'location') {
                        location = new Location(parser);
                    } else if (text == 'maidenName') {
                        maidenName = parser.getText();
                    } else if (text == 'pictureUrl') {
                        pictureUrl = parser.getText();
                    } else if (text == 'positions') {
                        positions = new Positions(parser);
                    } else if (text == 'publicProfileUrl') {
                        publicProfileUrl = parser.getText();
                    } else if (text == 'skills') {
                        skills = new Skills(parser);
                    } else if (text == 'summary') {
                        summary = parser.getText();
                    } else if (text == 'specialties') {
                        specialties = parser.getText();
                    } else if (text == 'associations') {
                        associations = parser.getText();
                    } else if (text == 'threeCurrentPositions') {
                        threeCurrentPositions = new ThreeCurrentPositions(parser);
                    } else if (text == 'threePastPositions') {
                        threePastPositions = new Positions(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class People {
        public Integer total1 {get;set;} 

        public People(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'People consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Following {
        public Certifications companies {get;set;} 
        public Industries industries {get;set;} 
        public People people {get;set;} 
        public People specialEditions {get;set;} 

        public Following(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'companies') {
                            companies = new Certifications(parser);
                        } else if (text == 'industries') {
                            industries = new Industries(parser);
                        } else if (text == 'people') {
                            people = new People(parser);
                        } else if (text == 'specialEditions') {
                            specialEditions = new People(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Following consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class CurrentShare {
        public Author author {get;set;} 
        public String comment {get;set;} 
        public String id {get;set;} 
        public Source source {get;set;} 
        public Long timestamp {get;set;} 
        public Visibility visibility {get;set;} 

        public CurrentShare(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'author') {
                            author = new Author(parser);
                        } else if (text == 'comment') {
                            comment = parser.getText();
                        } else if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'source') {
                            source = new Source(parser);
                        } else if (text == 'timestamp') {
                            timestamp = parser.getLongValue();
                        } else if (text == 'visibility') {
                            visibility = new Visibility(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'CurrentShare consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ApiStandardProfileRequest {
        public Headers headers {get;set;} 
        public String url {get;set;} 

        public ApiStandardProfileRequest(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'headers') {
                            headers = new Headers(parser);
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ApiStandardProfileRequest consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ServiceProvider {
        public String name {get;set;} 

        public ServiceProvider(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ServiceProvider consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Positions {
        public Integer total1 {get;set;} 
        public List<Values_W> values {get;set;} 

        public Positions(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_total') {
                            total1 = parser.getIntegerValue();
                        } else if (text == 'values') {
                            values = new List<Values_W>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                values.add(new Values_W(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Positions consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Author {
        public String firstName {get;set;} 
        public String id {get;set;} 
        public String lastName {get;set;} 

        public Author(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'firstName') {
                            firstName = parser.getText();
                        } else if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'lastName') {
                            lastName = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Author consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Visibility {
        public String code {get;set;} 

        public Visibility(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'code') {
                            code = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Visibility consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Location {
        public Visibility country {get;set;} 
        public String name {get;set;} 

        public Location(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'country') {
                            country = new Visibility(parser);
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Location consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static LinkedInProfile parse(String json) {
        return new LinkedInProfile(System.JSON.createParser(json));
    }
}